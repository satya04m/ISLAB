def KSA(key):
    key_length = len(key)
    S = list(range(256))
    j = 0
    for i in range(256):
        j = (j + S[i] + ord(key[i % key_length])) % 256
        S[i], S[j] = S[j], S[i]
    return S

def PRGA(S):
    i = 0
    j = 0
    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]
        K = S[(S[i] + S[j]) % 256]
        yield K

def rc4(key, text):
    S = KSA(key)
    keystream = PRGA(S)
    result = ''.join(chr(ord(c) ^ next(keystream)) for c in text)
    return result


key = "Key"
plain_text = "Plaintext"
cipher_text = rc4(key, plain_text)
decrypted_text = rc4(key, cipher_text)

print(f"Key: {key}")
print(f"Plaintext: {plain_text}")
print(f"Ciphertext: {cipher_text}")
print(f"Decrypted: {decrypted_text}")
